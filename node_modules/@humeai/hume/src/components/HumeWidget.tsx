import { useEffect, useRef } from "react";

interface HumeWidgetProps {
  width: number;
  height: number;
}

export default function HumeWidget(props: HumeWidgetProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    const canvas = canvasRef.current;
    const context = canvas?.getContext("2d");
    if (!canvas || !context) {
      console.log("Missing canvas or canvas context");
      return;
    }

    canvas.width = props.width;
    canvas.height = props.height;

    const radius = 6;
    const location = { x: canvas.width / 2, y: canvas.height / 2 };
    context.clearRect(0, 0, canvas.width, canvas.height);
    context.beginPath();
    context.arc(location.x, location.y, radius, 0, 2 * Math.PI);
    context.fillStyle = "#3498db";
    context.fill();
  }, []);

  return (
    <div className="gb-neutral-400">
      <canvas ref={canvasRef}></canvas>
      <span>TEST</span>
    </div>
  );
}
